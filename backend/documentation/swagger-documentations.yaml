openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/TANNARMOSS_1/MetricBoetAPI/1.0.0
info:
  version: "1.0.0"
  title: Metric Boet API Documentation
  description: The API for the Metric Boet Application which serves as basic Admin Portal for farmers to add and configure metric devices when farming. These devices record a range of metrics which allow the farmer to create alerts and schedule maintance when required.
paths:
  /users:
    get:
      summary: 'Returns All Users'
      operationId: 'getUsersOperation'
      parameters:
        - name: recordsPerPage
          description: 'Number of records to be returned on each page'
          in: query
          schema:
            type: integer
            format: int64
            default: 20
        - name: page
          description: 'Page of results to return'
          in: query
          schema:
            type: integer
            format: int64
            default: 1
      description: Return users paginated list according to request body. <br> <br> <b> Note &#58; </b> Empty list are not returned instead 404 Note found rsponses are
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/ResponsePaging'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequestStatus'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbiddenStatus'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFoundStatus'
      tags:
        - Users
    post:
      tags:
        - Users
      summary: 'Add a New User'
      operationId: 'createUserOperation'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  required: false
                  example: 'Gateway'
                properties:
                  type: array
                  required: false
                  items:
                    type: object
                    properties:
                      propertyName:
                        type: string
                        required: false
                        example: 'description'
                      propertyValue:
                        type: string
                        required: false
                        example: 'Description of the system'
        required: true
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequestStatus'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbiddenStatus'
        '405':
          description: 'Invalid input'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorValidationStatus'
  /users/{userId}:
    get:
      tags:
        - Users
      summary: 'Find user by ID'
      operationId: 'getUserByIdOperation'
      description: 'Returns a single User represented by the supplied ID'
      parameters:
        - name: systemId
          in: path
          description: 'ID of User to return'
          required: true
          example: 7
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequestStatus'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbiddenStatus'
        '404':
          description: 'System not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFoundStatus'
    put:
      tags:
        - Users
      summary: 'Update an existing User'
      operationId: 'updateUserByIdOperation'
      description: 'Update an existing User represented by the supplied ID'
      parameters:
        - name: systemId
          in: path
          description: 'ID of the User to update'
          required: true
          schema:
            type: integer
            format: int64
            example: 7
      requestBody:
        description: 'The User data that needs to be updated'
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Gateway
                properties:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        example: 7
                      propertyName:
                        type: string
                        example: 'description'
                      propertyValue:
                        type: string
                        example: 'Description of the system'
        required: true
        responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequestStatus'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbiddenStatus'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFoundStatus'
        '405':
          description: 'Validation exception'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorValidationStatus'
components:
  schemas:
    User:
      type: object
      properties:
        Id:
          type: integer
          format: int64
          example: 1001
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameters'
        createdUser:
          type: integer
          format: int64
          example: 69
        createdDate:
          type: string
          format: date-time
          example: '2023-03-15 11:42:23'
        modifiedUser:
          type: integer
          format: int64
          example: 69
        modifiedDate:
          type: string
          format: date-time
          example: '2023-08-13 13:41:20'
    Parameters:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 93
        parameterTypeId:
          type: integer
          format: int64
          example: 15
        parameterValue:
          type: string
          example: '09854230598'
        enabled:
          type: boolean
          example: 'true'
        createdDate:
          type: string
          format: date-time
          example: '2023-03-15 11:42:23'
        modifiedDate:
          type: string
          format: date-time
          example: '2023-08-13 13:41:20'
    ResponsePaging:
      type: object
      properties:
        totalRecords:
          type: integer
          format: int64
          example: 17
        totalPages:
          type: integer
          format: int64
          example: 1
        page:
          type: integer
          format: int64
          example: 1
    SuccessUpdateStatus:
      type: object
      properties:
        status:
          type: string
          example: 'Success'
        message:
          type: string
          example: 'record successfully updated'
    ErrorBadRequestStatus:
      type: object
      properties:
        message:
          type: string
          default: 'Bad Request'
    ErrorForbiddenStatus:
      type: object
      properties:
        message:
          type: string
          default: 'Access Forbidden'
    ErrorNotFoundStatus:
      type: object
      properties:
        message:
          type: string
          default: 'No Record Found'
    ErrorValidationStatus:
      type: object
      properties:
        message:
          type: string
          default: 'Invalid Value Submitted'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic